%{
#include <stdio.h>
#include <stdlib.h>
#define YYDEBUG 1               // Enable Bison's debug mode to print debug information during parsing.
void yyerror(const char *s);    // Function to be called on error; prints syntax errors.
extern int yylex(void);         // Declaration of the lexical analyzer function generated by Flex.
extern int yydebug;             // Declare yydebug for enabling debug mode in Bison.
%}

%union {
    int num;                    // Union member for integer values.
    float fnum;                 // Union member for float values.
    char* str;                  // Union member for string values.
}

%token <str> STRING IDENTIFIER S S_FLOAT        // Tokens with string semantic values.
%token START END MAIN MOVE ADD INPUT PRINT TO   // Tokens representing keywords.
%token <num> INTEGER                            // Token for integer values with num semantic value.
%token <fnum> FLOAT                             // Token for float values with fnum semantic value.
%token DOT SEMICOLON                            // Tokens for dot and semicolon symbols.

%start program                                  // Start symbol of the grammar.

%%

// Grammar rules

program:
    START DOT declarations MAIN DOT statements END DOT
    ;

declarations:
    /* Empty */                 // Represents an optional declarations section.
    | declarations declaration  // Recursive rule to allow multiple declarations.
    ;

declaration:
    S IDENTIFIER DOT            // Rule for declaring an integer variable.
    | S_FLOAT IDENTIFIER DOT    // Rule for declaring a float variable.
    ;

statements:
    /* Empty */                 // Represents an optional statements section.
    | statements statement      // Recursive rule to allow multiple statements.
    ;

statement:
    assignment_statement
    | input_statement
    | output_statement
    ;

assignment_statement:
    MOVE value TO IDENTIFIER DOT // Assignment or addition of value to a variable.
    | ADD value TO IDENTIFIER DOT
    ;

value:
    INTEGER
    | FLOAT
    | IDENTIFIER
    ;

input_statement:
    INPUT identifiers DOT       // Input statement for one or more identifiers.
    ;

identifiers:
    IDENTIFIER // Single identifier.
    | identifiers SEMICOLON IDENTIFIER // Multiple identifiers separated by semicolons.
    ;

output_statement:
    PRINT outputs DOT           // Output statement for one or more strings/identifiers.
    ;

outputs:
    STRING                           // Output a string.
    | IDENTIFIER                    // Output a variable's value.
    | outputs SEMICOLON STRING      // Output a string following other outputs.
    | outputs SEMICOLON IDENTIFIER  // Output a variable's value following other outputs.
    ;

%%

void yyerror(const char *s) {
    fprintf(stderr, "Syntax Error: %s\n", s); // Prints syntax error message.
}

int main(void) {
    yydebug = 1;                // Enable debug mode to get detailed parsing process.
    if (yyparse() == 0) {       // Parse input and check if the program is syntactically correct.
        printf("Program is syntactically correct.\n");
    } else {
        printf("Program has syntax errors.\n");
    }
    return 0; // Exit program.
}
